JINY KERNEL 0.1  (JINY :  Jana's tINY)

1) WHAT IS JINY?.
 Jiny is a small foot print kernel, initally will be running on a virtual environment and with limited functionality on a baremetal. It is designed to run efficently with small foot print on a virtual environment.

2) ON WHAT HARDWARE DOES IT RUN?
 It will be fully tested for x86-64. partially done for x86-32 but discontinued.

3) For What purpose JINY will be used initially?
 JINY will be used initially to model the page cache suitable for hadoop like applications.

------------------------------------------
The goals of the project are:
	1) It should be monalitic kernel with a small footprint: To keep kernel size small. This is done by writing paravirtualised drivers  if it not running on the bare metal. To begin with, file system is implemented  with a paravirtualised driver.
	2) powerful command line and debug environment.
	3) Higly modularise:  To define well defined interface between modules , so as any module can be replaced by keeping the interface same. (see include/interface.h for more details.

------------------------------------------
page cache Algorithm based on paper:
      Every file is tagged as Long lived(LRU) or short lived(MRU). Based on the tag, the pages of file will processed differently in the page cache. Page cache algorithm tries to evacuate the Short lived files as soon as possible to create a space for the long lived files. From the Application point of view, a file is tagged by using fadvise call after the open call. This approach of tagging will help applications like hadoop to retain the temporary files as long as possible in dirty state before they are removed, this saves disk io both interms of read and write.

 
Data Structures:
	page : Every page containg age attribute, age is updated when ever the page is accessed(read) or dirted(write) depending on type of file.If age of page made eldest means page is going to evacuate from the system very soon. The value of age can varies from 1(youngest) to n(eldest). n is configirable default may be 100. 
	queues : active,inactive,LRU dirty,MRU dirty and free queue.

Tasks:
	1) when page is read:
		if it is MRU type the age is changed to eldest and moved to end of inactive list.
		if it is LRU it is changed to youngest and moved to end of acive list.
	2) when page is written:
		LRU dirty : if it is LRU type moved to end of LRU dirty queue and made youngest.
		MRU dirty : if it is MRU type, moved to end of MRU dirty queue and made eldest.
	3) when fle is synced using fdatasync:
		If the file is LRU: after flushing the page, the page is made youngest and queued at the end of active list.
		If the file is MRU: after flushing the page, the page is made eldest and queued at the end of inactive list.
	4) Background house keeper thread: flush the dirty pages and create enough free pages for page cache.
		a) It scans the pagetables periodically and updates the age.( this is needed only if the file is mmaped. TODO : currently partially implemented).
		b) flush MRU dirty queues: MRU dirty queue is flushed as soon as possible whenever disk bandwidth is available.
		c) flush LRU dirty queue LAZILY : It is flushed only when the page cache is running short of free pages and MRU dirty queue is empty or amount of LRU dirty pages execeed threshould.
					    
Interface functions:
	Initialization and stat:
		int pc_init(unsigned char *start_addr,unsigned long len);
		int pc_stats(char *arg1,char *arg2);
	When page is written:
		int pc_insertInodePage(struct inode *inode,struct page *page); /* this api is used while reading unpresent page  */
		int pc_pageDirted(struct page *p);
	When page is flushed:
		int pc_pagecleaned(struct page *page);
	when page is read:
		struct page *pc_getInodePage(struct inode *inode,unsigned long offset);
	when empty page is needed:
		page_struct_t *pc_getFreePage();
	when page freed:
		int pc_putFreePage(struct page *page);

------------------------------------------	
Design :
mm : memory management
pc : page cache 
vfs : virtual filesystem
kernel : cpu scheduling
--------------------------------------------

Code Organization:
  Entire code is splitted into the following modules:

1) scheduling (sc)
	sc_fork
	sc_createThread
	sc_exit
	sc_schedule
	
2) memory management ( vm,mm)
	vm_brk
	vm_mmap
	vm_munmap
	vm_findVma
	vm_printMmaps

	mm_getFreePages	
	mm_putFreePages	
	mm_malloc
	mm_free
	mm_kmem_*
	
3) VFS 
    pagecache:
	pc_getInodePage : get particular page of offset from inode
	pc_insertInodePage : insert a page in to inode or pagecache
	pc_putFreePage : put a page into free list
	pc_getFreePage : get a free page from free list
	pc_init : initialize the subsystem	

	fs_getInode : from filename get the appropriate inode
	fs_registerFileSystem :
	fs_open,fs_read,fs_write,fs_close  : file operations
	
4) isr  (AR)
5) Drivers (DR)
6) utilities (UT)
	ut_putchar
	ut_printf
	ut_memcpy
	ut_memset
	ut_strcmp
	ut_strcpy
	ut_strlen

_____________________________
 Running :
  -> multiboot (hd0)/kernel
  -> boot

vim commands:
    ESC V G =   for entire file
    ESC V % =  for a block
  V= visual mode
------------------------------
Constructing the image for grub2 (Not sucessfull):

dd if=/dev/zero of=bin/g2_image bs=512 count=8000
--sudo losetup /dev/loop0 -d
--sudo losetup /dev/loop0  bin/g2_image
--sudo mke2fs /dev/loop0
mke2fs bin/g2_image
sudo mount /dev/loop0 /tmp/ab/
populate files into /tmp/ab/

sudo umount /tmp/ab
sudo grub-install --force  /dev/loop0 
-------------------------------
WorkAround:
    - use old image as bootable disk for grub, use second disk to store the kernel.
-----------------------------------
qemu running:
 sudo ./qemu-system-x86_64 -s -m 1024M -L /home/njana/qemu/opt/qemu.12.5/share/qemu -hda /home/njana/tinykernel/bin/g2_bootdisk -hdb /home/njana/tinykernel/bin/g2_image  -enable-kvm -chardev socket,path=/tmp/jana,id=jana -device ivshmem,chardev=jana,size=2m,msi=off -vnc :4
 
serial :
  -serial /dev/pt/1 

where /dev/pts/1 is the pty for the console running qemu

-------------------------------------
