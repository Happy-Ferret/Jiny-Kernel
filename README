JINY : (Jana tINY) kernel designed from ground up for superior performance on Hypervisor/cloud.

1) WHAT IS JINY?.
 -Jiny is a tiny unix type of kernel similar to linux, linux app can run directly on it without recompiling because Jiny provides system call interface same or subset of linux. 
 -Designed from ground up: Jiny is designed from the ground up to run on top of hypervisor(kvm,xen) resulting in superior performance. The performance gain will come from reducing memory and cpu overhead when compare to traditional vm like linux,freebsd etc.
 -High priority versus normal priority apps: The apps running on Jiny OS are divided in to high priority app and normal priority. The high priority app like JVM,memcached can run faster when compare to the same app in linux vm.
 -The number of high priority app's to run will be restricted 1 or 2 at any time because they will be running in kernel context. Low priority app's  will not be recompiled and not limited in number, the performance will be similar to that of Linux. 

2) What is the development plan and current status?.
  Phase-1: Developing traditional tiny unix like kernel with small foot print(Completed)
   a) bringing kernel up on x86_64 without any user level app.
   b) Implementing most of the linux system calls, so that statically compiled app's on linux can run as it is. Currently app's like busybox can run as it is.
    
  phase-2: Converting tiny kernel to high performance kernel on hypervisor(In Progress)
   a) Changes in Jiny to support high priority app with superior performance when compare to linux vm.
      - to run the high priority app in the kernel context, this is to reduce the memory overhead.
      - to disable/minimize the interrupts on the cpu that is loaded with high priority app. this is reduce the cpu overhead and locks.
   b) converting most of subsytems in Jiny from c to c++11.
   
 phase-1 was developed more like traditional unix like kernel with small foot print on hypervisor. phase-2 is more performance centric for speciliazed high priority app's.
  
   
3) For What purpose Jiny can be used?
In the Past, it was used for:
	a) To model the page cache(MRU+LRU) suitable for hadoop like applications.
	b) To model Host based filesystem(HFS): HFS is filesystem run in guest OS but does file i/o using the shared memory between the guest and host os. HFS does not need any block drivers, it communicated with block devices using the shared memory between guest and host OS.  
	c) Benchmarking virtio net performance.
	
In the future, it can be used for:
    a) running specialized high priority app like  JVM(hadoop,or any java server), memcached etc. 
    JinyOS can provide superior performance on virtual resources for high priority apps, this performance comes  by reducing memory and cpu overhead when compare to traditional vm like linux,freebsd etc.

4) ON WHAT HARDWARE DOES IT RUN?
 It was fully tested for x86_64. partially done for x86_32.
------------------------------------------

Phase-1 feature Currently Available:
Page Cache: 
   - LRU and MRU based (based on the published paper in opencirrus)
   
File System: 
   - 9p+virtio
   - Host based file system based on ivshm(Inter Vm Shared Memory) 
   
Virtualization Features:
   - Elastic Cpu's:
       - depending on the load, some of the cpu's will be rested.
       - todo: disabling IPI interrupts for a in-active cpu.
       
   - Elastic Memory:
       - depending on the load, some amount of physical memory can be disabled, so as host/other vm's can use.
       - todo: using common pool memory for pagecache, currently there are two pools of memory one for pagecache, second for rest.
       
Virtualization drivers:
    - Xen : xenbus, network driver using xen paravirtualised.
    - KVM : virtio + P9 filesystem
    - KVM : virtio + Network (test server with udp stack(tcp/ip))
    - KVM : virtio + memory ballooning
    - KVM : clock
      
SMP:
   - APIC,MSIX
   
Networking:
   - XEN: TCP/IP stack(from LWIP) integrated with XEN paravirtualised Network driver.
   - KVM: Virtio + LWIP4.0 as a kernel module
   
Debug features:
   - memoryleak detection.
   - function tracing or call graph.
   - syscall debugging.
   - stack capture at any point. 

Loadable Modules:
   - Supports loadable kernel module. Lwip tcp/ip stack compiled as kernel module.

User level:
   - Statically compiled user app can be launched from kernel shell or busy box.
   - busybox shell can successfully run on top of Jiny kernel, network apps can able to use socket layer.

------------------------------------------------------------------------------------
TODO Features in phase-1:
  - Elastic CPU's and Elastic Memory todo's       
  - userlevel shared library support from kernel: so that many user level linux apps can run in Jiny, currently only statically linked apps can run directly.
  - Syscalls: Implementing advanced syscalls like futex etc :Running advanced apps in busybox, currently all file/network related apps can able to run.

TODO Features in pahse-2:
   - Tunning VM and task schedular layer's to support high priority tasks.
   - Benchmarking the high priority app's to run on Jiny and linux.
   - code cleanup and converting into C++11
------------------------------------------------------------------------------------

papers:
  1) doc/PageCache-Open-Cirrus.pdf  - paper appered @ open cirrus-2011.
  2) doc/malloc_paper_techpulse_submit_final.pdf  - memory optimization techiniques.
  3) doc/pagecache.txt - jiny pagecache implementation
