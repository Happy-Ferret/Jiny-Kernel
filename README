JINY KERNEL   (JINY : Jana's tINY  toy kernel)

1) WHAT IS JINY?.
 Jiny is a small foot print Toy kernel, It is yet another Unix based kernel. It is specialized more for virtual machine environment but can also use on baremetal. 
  
2) ON WHAT HARDWARE DOES IT RUN?
 It was fully tested for x86-64. partially done for x86-32.

3) For What purpose JINY was used initially and can be used in future?
 JINY  was initially used for: 
	a) To model the page cache(MRU+LRU) suitable for hadoop like applications.
	b) To model Host based filesystem(HFS): HFS is filesystem run in guest OS but does file i/o using the shared memory between the guest and host os. HFS does not need any block drivers, it communicated with block devices using the shared memory between guest and host OS.  
	c) Bench marking virtio net performance.
	d) To model Centralized page cache shared by different vm's.
In Future Jiny Can be Used for:
    a) running specialized user level app like hadoop/busybox running on Jiny. JinyOS can make use of virtual resources effeciently when compare to the general purpose OS's like linux,freebsd etc for a specialised apps.
------------------------------------------

The goals of the project are:
	1) To be monolithic unix based kernel with a small footprint. 
	2) powerful command line and debug environment.
	3) Higly modular:  To define well defined interface between subsystems.
	4) Virtualization features:  Virtualization features like virtio,xen para drivers, Elastic CPU and Elastic memory.
	5) Running directly linux application like  Busy box/JVM on top of Jiny as it is, for this need support almost all system call. (partially completed).
------------------------------------------

Feature Currently Available:

Page Cache: 
   - LRU and MRU based (based on the below published paper)
   
File System: 
   - 9p+virtio
   - Host based file system based on ivshm(Inter Vm Shared Memory) 
   
Virtualization Features:
   - Elastic Cpu's:
       - depending on the load, some of the cpu's will be rested.
       - todo: disabling IPI interrupts for a in-active cpu.
       
   - Elastic Memory:
       - depending on the load, some amount of physical memory can be disabled, so as host/other vm's can use.
       - todo: using common pool memory for pagecache, currently there are two pools of memory one for pagecache, second for rest.
       
Virtualization drivers:
    - Xen : xenbus, network driver using xen paravirtualised.
    - KVM : virtio + P9 filesystem
    - KVM : virtio + Network (test server with udp stack(tcp/ip))
    - KVM : virtio + memory ballooning
    - KVM : clock
      
SMP:
   - APIC,MSIX
   
Networking:
   - XEN: TCP/IP stack(from LWIP) integrated with XEN paravirtualised Network driver.
   - KVM: Virtio + LWIP4.0 as a kernel module
   
Debug features:
   - memoryleak detection.
   - function tracing or call graph.
   - syscall debugging.
   - stack capture at any point. 

Loadable Modules:
   - Supports loadable kernel module. Lwip tcp/ip stack can be compiled as kernel module.

User level:
   - Statically compiled user app can be launched from kernel shell or busy box.
   - busybox shell can successfully run on top of Jiny kernel, network apps can able to use socket layer.

------------------------------------------------------------------------------------
TODO Features:
  - Elastic CPU's and Elastic Memory todo's       
  - Centralized page cache.
  - userlevel shared library support from kernel: so that many user level linux apps can run in Jiny, currently only statically linked apps can run directly.
  - Syscalls: Implementing advanced syscalls like futex etc :Running advanced apps in busybox, currently all file/network related apps can able to run.

------------------------------------------------------------------------------------

papers:
  1) doc/PageCache-Open-Cirrus.pdf  - paper appered @ open cirrus-2011.
  2) doc/malloc_paper_techpulse_submit_final.pdf  - memory optimization techiniques.
  3) doc/pagecache.txt - jiny pagecache implementation
